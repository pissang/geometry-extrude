{"version":3,"file":"geometry-extrude.js","sources":["../node_modules/.pnpm/earcut@2.2.3/node_modules/earcut/src/earcut.js","../src/simplify.js","../src/math.js","../src/main.js"],"sourcesContent":["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    var filteredBridge = filterPoints(bridge, bridge.next);\n    filterPoints(bridgeReverse, bridgeReverse.next);\n\n    // Check if input node was removed by the filtering\n    return outerNode === bridge ? filteredBridge : outerNode;\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n","/*\n (c) 2017, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    if (points.length <= 2) return points;\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\nexport default simplify;","export function dot(v1, v2) {\n    return v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];\n}\nexport function v2Dot(v1, v2) {\n    return v1[0] * v2[0] + v1[1] * v2[1];\n}\n\nexport function normalize(out, v) {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const d = Math.sqrt(x * x + y * y + z * z);\n    out[0] = x / d;\n    out[1] = y / d;\n    out[2] = z / d;\n    return out;\n}\n\nexport function v2Normalize(out, v) {\n    const x = v[0];\n    const y = v[1];\n    const d = Math.sqrt(x * x + y * y);\n    out[0] = x / d;\n    out[1] = y / d;\n    return out;\n}\n\nexport function scale(out, v, s) {\n    out[0] = v[0] * s;\n    out[1] = v[1] * s;\n    out[2] = v[2] * s;\n    return out;\n}\n\nexport function mul(out, v1, v2) {\n    out[0] = v1[0] * v2[0];\n    out[1] = v1[1] * v2[1];\n    out[2] = v1[2] * v2[2];\n    return out;\n}\n\nexport function scaleAndAdd(out, v1, v2, s) {\n    out[0] = v1[0] + v2[0] * s;\n    out[1] = v1[1] + v2[1] * s;\n    out[2] = v1[2] + v2[2] * s;\n    return out;\n}\n\nexport function add(out, v1, v2) {\n    out[0] = v1[0] + v2[0];\n    out[1] = v1[1] + v2[1];\n    out[2] = v1[2] + v2[2];\n    return out;\n}\n\nexport function v2Add(out, v1, v2) {\n    out[0] = v1[0] + v2[0];\n    out[1] = v1[1] + v2[1];\n    return out;\n}\n\nexport function sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    out[2] = v1[2] - v2[2];\n    return out;\n}\n\nexport function v2Sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    return out;\n}\n\nexport function v3Sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    out[2] = v1[2] - v2[2];\n    return out;\n}\n\nexport function v3Normalize(out, v) {\n    const x = v[0];\n    const y = v[1];\n    const z = v[2];\n    const d = Math.sqrt(x * x + y * y + z * z);\n    out[0] = x / d;\n    out[1] = y / d;\n    out[2] = z / d;\n    return out;\n}\n\nexport function v3Cross(out, v1, v2) {\n    var ax = v1[0], ay = v1[1], az = v1[2],\n        bx = v2[0], by = v2[1], bz = v2[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\nconst rel = [];\n// start and end must be normalized\nexport function slerp(out, start, end, t) {\n    // https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\n    const cosT = dot(start, end);\n    const theta = Math.acos(cosT) * t;\n\n    scaleAndAdd(rel, end, start, -cosT);\n    normalize(rel, rel);// start and rel Orthonormal basis\n\n    scale(out, start, Math.cos(theta));\n    scaleAndAdd(out, out, rel, Math.sin(theta));\n\n    return out;\n}\n\nexport function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4, out, writeOffset) {\n    const dx1 = x2 - x1;\n    const dx2 = x4 - x3;\n    const dy1 = y2 - y1;\n    const dy2 = y4 - y3;\n\n    const cross = dy2 * dx1 - dx2 * dy1;\n    const tmp1 = y1 - y3;\n    const tmp2 = x1 - x3;\n    const t1 = (dx2 * tmp1 - dy2 * tmp2) / cross;\n    // const t2 = (dx1 * tmp1 - dy1 * tmp2) / cross;\n\n    if (out) {\n        writeOffset = writeOffset || 0;\n        out[writeOffset] = x1 + t1 * (x2 - x1);\n        out[writeOffset + 1] = y1 + t1 * (y2 - y1);\n    }\n\n    return t1;\n}\n\nexport function area(points, start, end) {\n    // Signed polygon area\n    const n = end - start;\n    if (n < 3) {\n        return 0;\n    }\n    let area = 0;\n    for (let i = (end - 1) * 2, j = start * 2; j < end * 2;) {\n        const x0 = points[i];\n        const y0 = points[i + 1];\n        const x1 = points[j];\n        const y1 = points[j + 1];\n        i = j;\n        j += 2;\n        area += x0 * y1 - x1 * y0;\n    }\n\n    return area;\n}\n\n\nexport function triangleArea(x0, y0, x1, y1, x2, y2) {\n    return (x1 - x0) * (y2 - y1) - (y1 - y0) * (x2 - x1);\n}","// TODO fitRect x, y are negative?\n// TODO Extrude dimensions\n// TODO bevel=\"top\"|\"bottom\"\n// TODO Not add top and bottom vertices if area is 0\n\nimport earcut from 'earcut';\nimport doSimplify from './simplify';\nimport {\n    slerp, v2Normalize, v2Dot, v2Add, area,\n    v3Normalize, v3Sub, v3Cross, lineIntersection\n} from './math';\n\nexport function triangulate(vertices, holes, dimensions=2) {\n    return earcut(vertices, holes, dimensions);\n};\n\nexport function flatten(data) {\n    return earcut.flatten(data);\n}\n\nconst v1 = [];\nconst v2 = [];\nconst v = [];\n\nfunction innerOffsetPolygon(\n    vertices, out, start, end, outStart, offset, miterLimit, close,\n    removeIntersections,\n    // offsetLines\n) {\n    const checkMiterLimit = miterLimit != null;\n    let cursor = outStart;\n    let indicesMap = null;\n    if (checkMiterLimit) {\n        indicesMap = new Uint32Array(end - start);\n    }\n    let prevOffsetX;\n    let prevOffsetY;\n    let prevCursor;\n    let tmpIntersection = [];\n\n    for (let i = start; i < end; i++) {\n        const nextIdx = i === end - 1 ? start : i + 1;\n        const prevIdx = i === start ? end - 1 : i - 1;\n        const x1 = vertices[prevIdx * 2];\n        const y1 = vertices[prevIdx * 2 + 1];\n        const x2 = vertices[i * 2];\n        const y2 = vertices[i * 2 + 1];\n        const x3 = vertices[nextIdx * 2];\n        const y3 = vertices[nextIdx * 2 + 1];\n\n        v1[0] = x2 - x1;\n        v1[1] = y2 - y1;\n        v2[0] = x3 - x2;\n        v2[1] = y3 - y2;\n\n        v2Normalize(v1, v1);\n        v2Normalize(v2, v2);\n\n        checkMiterLimit && (indicesMap[i] = cursor);\n\n        let needCheckIntersection = false;\n        let offsetX;\n        let offsetY;\n        if (!close && i === start) {\n            v[0] = v2[1];\n            v[1] = -v2[0];\n            v2Normalize(v, v);\n            prevOffsetX = out[cursor * 2] = x2 + v[0] * offset;\n            prevOffsetY = out[cursor * 2 + 1] = y2 + v[1] * offset;\n            prevCursor = cursor;\n\n            // offsetLines && offsetLines.push([x2, y2, prevOffsetX, prevOffsetY, cursor])\n            cursor++;\n        }\n        else if (!close && i === end - 1) {\n            v[0] = v1[1];\n            v[1] = -v1[0];\n            v2Normalize(v, v);\n\n            offsetX = x2 + v[0] * offset;\n            offsetY = y2 + v[1] * offset;\n\n            needCheckIntersection = true;\n        }\n        else {\n            // PENDING Why using sub will lost the direction info.\n            v2Add(v, v2, v1);\n            const tmp = v[1];\n            v[1] = -v[0];\n            v[0] = tmp;\n\n            v2Normalize(v, v);\n\n            const cosA = v2Dot(v, v2);\n            const sinA = Math.sqrt(1 - cosA * cosA);\n            // PENDING\n            // Make sure it's offset lines instead of vertices.\n            const miter = offset * Math.min(10, 1 / sinA);\n\n            const isCovex = offset * cosA < 0;\n\n            if (checkMiterLimit && (1 / sinA) > miterLimit && isCovex) {\n                // No need to check line intersection on the outline.\n                const mx = x2 + v[0] * offset;\n                const my = y2 + v[1] * offset;\n                const halfA = Math.acos(sinA) / 2;\n                const dist = Math.tan(halfA) * Math.abs(offset);\n                out[cursor * 2] = mx + v[1] * dist;\n                out[cursor * 2 + 1] = my - v[0] * dist;\n                cursor++;\n                out[cursor * 2] = mx - v[1] * dist;\n                out[cursor * 2 + 1] = my + v[0] * dist;\n                cursor++;\n            }\n            else {\n                offsetX = x2 + v[0] * miter;\n                offsetY = y2 + v[1] * miter;\n                needCheckIntersection = true;\n            }\n\n            if (needCheckIntersection) {\n                // TODO Handle with whole.\n                if (removeIntersections && prevOffsetX != null) {\n                    // Greedy, only check with previous offset line\n                    // PENDING: Is it necessary to check with other lines?\n                    const t = lineIntersection(\n                        x1, y1, prevOffsetX, prevOffsetY,\n                        x2, y2, offsetX, offsetY, tmpIntersection, 0\n                    );\n                    // Use a eplison\n                    if (t >= -1e-2 && t <= 1 + 1e-2) {\n                        // Update previous offset points.\n                        out[prevCursor * 2] = offsetX = tmpIntersection[0];\n                        out[prevCursor * 2 + 1] = offsetY = tmpIntersection[1];\n                    }\n                }\n\n                prevOffsetX = out[cursor * 2] = offsetX;\n                prevOffsetY = out[cursor * 2 + 1] = offsetY;\n                prevCursor = cursor;\n\n                // offsetLines && offsetLines.push([x2, y2, offsetX, offsetY, cursor])\n\n                cursor++;\n            }\n        }\n    }\n\n\n    return indicesMap;\n}\n\nexport function offsetPolygon(vertices, holes, offset, miterLimit, close) {\n    const offsetVertices = miterLimit != null ? [] : new Float32Array(vertices.length);\n    const exteriorSize = (holes && holes.length) ? holes[0] : vertices.length / 2;\n\n    const offsetLines = [];\n\n    innerOffsetPolygon(\n        vertices, offsetVertices, 0, exteriorSize, 0, offset, miterLimit, close, true\n    );\n\n    if (holes) {\n        for (let i = 0; i < holes.length; i++) {\n            const start = holes[i];\n            const end = holes[i + 1] || vertices.length / 2;\n            innerOffsetPolygon(\n                vertices, offsetVertices, start, end,\n                miterLimit != null ? offsetVertices.length / 2 : start,\n                offset, miterLimit, close, false\n            );\n        }\n    }\n\n    // TODO holes\n    // Remove intersections of offseted polygon\n    // let len = offsetLines.length;\n    // let tmpIntersection = [];\n    // for (let i = 0; i < len; i++) {\n    //     const line1 = offsetLines[i];\n    //     for (let k = i + 1; k < len; k++) {\n    //         const line2 = offsetLines[k];\n\n    //         const t = lineIntersection(\n    //             line1[0], line1[1], line1[2], line1[3],\n    //             line2[0], line2[1], line2[2], line2[3], tmpIntersection, 0\n    //         );\n    //         // Use a eplison\n    //         if (t >= -1e-2 && t <= 1 + 1e-2) {\n    //             const cursor1 = line1[4] * 2;\n    //             const cursor2 = line2[4] * 2;\n    //             // Update\n    //             offsetVertices[cursor1] = offsetVertices[cursor2] = line1[2] = line2[2] = tmpIntersection[0];\n    //             offsetVertices[cursor1 + 1] = offsetVertices[cursor2 + 1] = line1[3] = line2[3]= tmpIntersection[1];\n    //         }\n    //     }\n    // }\n    return offsetVertices;\n}\n\nfunction reversePoints(points, stride, start, end) {\n    for (let i = 0; i < Math.floor((end - start) / 2); i++) {\n        for (let j = 0; j < stride; j++) {\n            const a = (i + start) * stride + j;\n            const b = (end - i - 1) * stride + j;\n            const tmp = points[a];\n            points[a] = points[b];\n            points[b] = tmp;\n        }\n    }\n\n    return points;\n}\n\nfunction convertToClockwise(vertices, holes) {\n    let polygonVertexCount = vertices.length / 2;\n    let start = 0;\n    let end = holes && holes.length ? holes[0] : polygonVertexCount;\n    if (area(vertices, start, end) > 0) {\n        reversePoints(vertices, 2, start, end);\n    }\n    for (let h = 1; h < (holes ? holes.length : 0) + 1; h++) {\n        start = holes[h - 1];\n        end = holes[h] || polygonVertexCount;\n        if (area(vertices, start, end) < 0) {\n            reversePoints(vertices, 2, start, end);\n        }\n    }\n}\n\nfunction normalizeOpts(opts) {\n\n    opts.depth = opts.depth || 1;\n    opts.bevelSize = opts.bevelSize || 0;\n    opts.bevelSegments = opts.bevelSegments == null ? 2 : opts.bevelSegments;\n    opts.smoothBevel = opts.smoothBevel || false;\n    opts.simplify = opts.simplify || 0;\n\n    if (opts.smoothSide == null) {\n        opts.smoothSide = 'auto'\n    }\n    if (opts.smoothSideThreshold == null) {\n        opts.smoothSideThreshold = 0.9\n    }\n\n    // Normalize bevel options.\n    if (typeof opts.depth === 'number') {\n        opts.bevelSize = Math.min(!(opts.bevelSegments > 0) ? 0 : opts.bevelSize, opts.depth / 2);\n    }\n    if (!(opts.bevelSize > 0)) {\n        opts.bevelSegments = 0;\n    }\n    opts.bevelSegments = Math.round(opts.bevelSegments);\n\n    const boundingRect = opts.boundingRect;\n    opts.translate = opts.translate || [0, 0];\n    opts.scale = opts.scale || [1, 1];\n    if (opts.fitRect) {\n        let targetX = opts.fitRect.x == null\n            ? (boundingRect.x || 0)\n            : opts.fitRect.x;\n        let targetY = opts.fitRect.y == null\n            ? (boundingRect.y || 0)\n            : opts.fitRect.y;\n        let targetWidth = opts.fitRect.width;\n        let targetHeight = opts.fitRect.height;\n        if (targetWidth == null) {\n            if (targetHeight != null) {\n                targetWidth = targetHeight / boundingRect.height * boundingRect.width;\n            }\n            else {\n                targetWidth = boundingRect.width;\n                targetHeight = boundingRect.height;\n            }\n        }\n        else if (targetHeight == null) {\n            targetHeight = targetWidth / boundingRect.width * boundingRect.height;\n        }\n        opts.scale = [\n            targetWidth / boundingRect.width,\n            targetHeight / boundingRect.height\n        ];\n        opts.translate = [\n            (targetX - boundingRect.x) * opts.scale[0],\n            (targetY - boundingRect.y) * opts.scale[1]\n        ];\n    }\n}\n\nfunction generateNormal(indices, position) {\n\n    function v3Set(p, a, b, c) {\n        p[0] = a; p[1] = b; p[2] = c;\n    }\n\n    const p1 = [];\n    const p2 = [];\n    const p3 = [];\n\n    const v21 = [];\n    const v32 = [];\n\n    const n = [];\n\n    const len = indices.length;\n    const normals = new Float32Array(position.length);\n\n    for (let f = 0; f < len;) {\n        const i1 = indices[f++] * 3;\n        const i2 = indices[f++] * 3;\n        const i3 = indices[f++] * 3;\n\n        v3Set(p1, position[i1], position[i1 + 1], position[i1 + 2]);\n        v3Set(p2, position[i2], position[i2 + 1], position[i2 + 2]);\n        v3Set(p3, position[i3], position[i3 + 1], position[i3 + 2]);\n\n        v3Sub(v21, p1, p2);\n        v3Sub(v32, p2, p3);\n        v3Cross(n, v21, v32);\n        // Already be weighted by the triangle area\n        for (let i = 0; i < 3; i++) {\n            normals[i1 + i] = normals[i1 + i] + n[i];\n            normals[i2 + i] = normals[i2 + i] + n[i];\n            normals[i3 + i] = normals[i3 + i] + n[i];\n        }\n    }\n\n    for (var i = 0; i < normals.length;) {\n        v3Set(n, normals[i], normals[i+1], normals[i+2]);\n        v3Normalize(n, n);\n        normals[i++] = n[0];\n        normals[i++] = n[1];\n        normals[i++] = n[2];\n\n    }\n\n    return normals;\n}\n// 0,0----1,0\n// 0,1----1,1\nconst quadToTriangle = [\n    [0, 0], [1, 0], [1, 1],\n    [0, 0], [1, 1], [0, 1]\n];\n\n// Add side vertices and indices. Include bevel.\nfunction addExtrudeSide(\n    out, {vertices, topVertices, splittedMap, depth, rect}, start, end,\n    cursors, opts\n) {\n    const ringVertexCount = end - start;\n\n    const splitBevel = opts.smoothBevel ? 1 : 2;\n    const bevelSize = Math.min(depth / 2, opts.bevelSize);\n    const bevelSegments = opts.bevelSegments;\n    const vertexOffset = cursors.vertex;\n    const size = Math.max(rect.width, rect.height, depth);\n\n    const isDuplicateVertex = splittedMap\n        ? (idx) => {\n            const nextIdx = (idx + 1) % ringVertexCount;\n            return splittedMap[idx + start] === splittedMap[nextIdx + start];\n        }\n        : (idx) => false;\n\n    // Side vertices\n    if (bevelSize > 0) {\n        const v0 = [0, 0, 1];\n        const v1 = [];\n        const v2 = [0, 0, -1];\n        const v = [];\n\n        let ringCount = 0;\n        let vLen = new Float32Array(ringVertexCount);\n        for (let k = 0; k < 2; k++) {\n            const z = (k === 0 ? (depth - bevelSize) : bevelSize);\n            for (let s = 0; s <= bevelSegments * splitBevel; s++) {\n                let uLen = 0;\n                let prevX;\n                let prevY;\n                for (let i = 0; i < ringVertexCount; i++) {\n                    const idx = (i % ringVertexCount + start) * 2;\n                    const rawIdx = splittedMap ? splittedMap[idx / 2] * 2 : idx;\n                    v1[0] = vertices[idx] - topVertices[rawIdx];\n                    v1[1] = vertices[idx + 1] - topVertices[rawIdx + 1];\n                    v1[2] = 0;\n                    const l = Math.sqrt(v1[0] * v1[0] + v1[1] * v1[1]);\n                    v1[0] /= l;\n                    v1[1] /= l;\n\n                    const t = (Math.floor(s / splitBevel) + (s % splitBevel)) / bevelSegments;\n                    k === 0 ? slerp(v, v0, v1, t)\n                        : slerp(v, v1, v2, t);\n\n                    const t2 = k === 0  ? t : 1 - t;\n                    const a = bevelSize * Math.sin(t2 * Math.PI / 2);\n                    const b = l * Math.cos(t2 * Math.PI / 2);\n\n                    // ellipse radius\n                    const r = bevelSize * l / Math.sqrt(a * a + b * b);\n\n                    const x = v[0] * r + topVertices[rawIdx];\n                    const y = v[1] * r + topVertices[rawIdx + 1];\n                    const zz = v[2] * r + z;\n                    out.position[cursors.vertex * 3] = x;\n                    out.position[cursors.vertex * 3 + 1] = y;\n                    out.position[cursors.vertex * 3 + 2] = zz;\n\n                    // TODO Cache and optimize\n                    if (i > 0) {\n                        uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\n                    }\n                    if (s > 0 || k > 0) {\n                        let tmp = (cursors.vertex - ringVertexCount) * 3;\n                        let prevX2 = out.position[tmp];\n                        let prevY2 = out.position[tmp + 1];\n                        let prevZ2 = out.position[tmp + 2];\n\n                        vLen[i] += Math.sqrt(\n                            (prevX2 - x) * (prevX2 - x)\n                            + (prevY2 - y) * (prevY2 - y)\n                            + (prevZ2 - zz) * (prevZ2 - zz)\n                        );\n                    }\n                    out.uv[cursors.vertex * 2] = uLen / size;\n                    out.uv[cursors.vertex * 2 + 1] = vLen[i] / size;\n\n                    prevX = x;\n                    prevY = y;\n                    cursors.vertex++;\n                    // Just ignore this face if vertex are duplicted in `splitVertices`\n                    if (isDuplicateVertex(i)) {\n                        continue;\n                    }\n                    if ((splitBevel > 1 && (s % splitBevel)) || (splitBevel === 1 && s >= 1)) {\n                        for (let f = 0; f < 6; f++) {\n                            const m = (quadToTriangle[f][0] + i) % ringVertexCount;\n                            const n = quadToTriangle[f][1] + ringCount;\n                            out.indices[cursors.index++] = (n - 1) * ringVertexCount + m + vertexOffset;\n                        }\n                    }\n                }\n\n                ringCount++;\n            }\n        }\n    }\n    else {\n        for (let k = 0; k < 2; k++) {\n            const z = k === 0 ? depth : 0;\n            let uLen = 0;\n            let prevX;\n            let prevY;\n            for (let i = 0; i < ringVertexCount; i++) {\n                const idx = (i + start) * 2;\n                const x = vertices[idx];\n                const y = vertices[idx + 1];\n                const vtx3 = cursors.vertex * 3;\n                const vtx2 = cursors.vertex * 2;\n                out.position[vtx3] = x;\n                out.position[vtx3 + 1] = y;\n                out.position[vtx3 + 2] = z;\n                if (i > 0) {\n                    uLen += Math.sqrt((prevX - x) * (prevX - x) + (prevY - y) * (prevY - y));\n                }\n                out.uv[vtx2] = uLen / size;\n                out.uv[vtx2 + 1] = z / size;\n                prevX = x;\n                prevY = y;\n\n                cursors.vertex++;\n            }\n        }\n    }\n    // Connect the side\n    const sideStartRingN = bevelSize > 0 ? (bevelSegments * splitBevel + 1) : 1;\n    for (let i = 0; i < ringVertexCount; i++) {\n        // Just ignore this face if vertex are duplicted in `splitVertices`\n        if (isDuplicateVertex(i)) {\n            continue;\n        }\n        for (let f = 0; f < 6; f++) {\n            const m = (quadToTriangle[f][0] + i) % ringVertexCount;\n            const n = quadToTriangle[f][1] + sideStartRingN;\n            out.indices[cursors.index++] = (n - 1) * ringVertexCount + m + vertexOffset;\n        }\n    }\n}\n\nfunction addTopAndBottom({indices, topVertices, rect, depth}, out, cursors, opts) {\n    if (topVertices.length <= 4) {\n        return;\n    }\n\n    const vertexOffset = cursors.vertex;\n    // Top indices\n    const indicesLen = indices.length;\n    for (let i = 0; i < indicesLen; i++) {\n        out.indices[cursors.index++] = vertexOffset + indices[i];\n    }\n    const size = Math.max(rect.width, rect.height);\n    // Top and bottom vertices\n    for (let k = 0; k < (opts.excludeBottom ? 1 : 2); k++) {\n        for (let i = 0; i < topVertices.length; i += 2) {\n            const x = topVertices[i];\n            const y = topVertices[i + 1];\n            const vtx3 = cursors.vertex * 3;\n            const vtx2 = cursors.vertex * 2;\n            out.position[vtx3] = x;\n            out.position[vtx3 + 1] = y;\n            out.position[vtx3 + 2] = (1 - k) * depth;\n\n            out.uv[vtx2] = (x - rect.x) / size;\n            out.uv[vtx2 + 1] = (y - rect.y) / size;\n            cursors.vertex++;\n        }\n    }\n    // Bottom indices\n    if (!opts.excludeBottom) {\n        const vertexCount = topVertices.length / 2;\n        for (let i = 0; i < indicesLen; i += 3) {\n            for (let k = 0; k < 3; k++) {\n                out.indices[cursors.index++] = vertexOffset + vertexCount + indices[i + 2 - k];\n            }\n        }\n    }\n}\n\n/**\n * Split vertices for sharp side.\n */\n function splitVertices(vertices, holes, smoothSide, smoothSideThreshold) {\n    const isAutoSmooth = smoothSide == null || smoothSide === 'auto';\n    if (smoothSide === true) {\n        return {vertices, holes};\n    }\n    const newVertices = [];\n    const newHoles = holes && [];\n    const count = vertices.length / 2;\n    const v1 = [];\n    const v2 = [];\n\n    // Map of splitted index to raw index\n    const splittedMap = [];\n\n    let start = 0;\n    let end = 0;\n\n    const polysCount = (holes ? holes.length : 0) + 1;\n    for (let h = 0; h < polysCount; h++) {\n        if (h === 0) {\n            end = holes && holes.length ? holes[0] : count;\n        }\n        else {\n            start = holes[h - 1];\n            end = holes[h] || count;\n        }\n\n        for (let i = start; i < end; i++) {\n            const x2 = vertices[i * 2];\n            const y2 = vertices[i * 2 + 1];\n            const nextIdx = i === end - 1 ? start : i + 1;\n            const x3 = vertices[nextIdx * 2];\n            const y3 = vertices[nextIdx * 2 + 1];\n\n            if (isAutoSmooth) {\n                const prevIdx = i === start ? end - 1 : i - 1;\n                const x1 = vertices[prevIdx * 2];\n                const y1 = vertices[prevIdx * 2 + 1];\n\n                v1[0] = x1 - x2;\n                v1[1] = y1 - y2;\n                v2[0] = x3 - x2;\n                v2[1] = y3 - y2;\n\n                v2Normalize(v1, v1);\n                v2Normalize(v2, v2);\n\n                const angleCos = v2Dot(v1, v2) * 0.5 + 0.5;\n\n                if ((1 - angleCos) > smoothSideThreshold) {\n                    newVertices.push(x2, y2);\n                    splittedMap.push(i);\n                }\n                else {\n                    newVertices.push(x2, y2, x2, y2);\n                    splittedMap.push(i, i);\n                }\n            }\n            else {\n                newVertices.push(x2, y2, x2, y2);\n                splittedMap.push(i, i);\n            }\n        }\n\n        if (h < polysCount - 1 && newHoles) {\n            newHoles.push(newVertices.length / 2);\n        }\n    }\n\n    return {\n        vertices: new Float32Array(newVertices),\n        splittedMap,\n        holes: newHoles\n    };\n}\n\nfunction innerExtrudeTriangulatedPolygon(preparedData, opts) {\n    let indexCount = 0;\n    let vertexCount = 0;\n\n    for (let p = 0; p < preparedData.length; p++) {\n        let {indices, vertices, splittedMap, topVertices, holes, depth} = preparedData[p];\n        const bevelSize = Math.min(depth / 2, opts.bevelSize);\n        const bevelSegments = !(bevelSize > 0) ? 0 : opts.bevelSegments;\n\n        holes = holes || [];\n\n        indexCount += indices.length * (opts.excludeBottom ? 1 : 2);\n        vertexCount += topVertices.length / 2 * (opts.excludeBottom ? 1 : 2);\n        const ringCount = 2 + bevelSegments * 2;\n\n        let start = 0;\n        let end = 0;\n        for (let h = 0; h < holes.length + 1; h++) {\n            if (h === 0) {\n                end = holes.length ? holes[0] : vertices.length / 2;\n            }\n            else {\n                start = holes[h - 1];\n                end = holes[h] || vertices.length / 2;\n            }\n\n            const faceEnd = splittedMap ? splittedMap[end - 1] + 1 : end;\n            const faceStart = splittedMap ? splittedMap[start] : start;\n            indexCount += (faceEnd - faceStart) * 6 * (ringCount - 1);\n\n            const sideRingVertexCount = end - start;\n            vertexCount += sideRingVertexCount * ringCount\n                // Double the bevel vertex number if not smooth\n                + (!opts.smoothBevel ? bevelSegments * sideRingVertexCount * 2 : 0);\n        }\n    }\n\n    const data = {\n        position: new Float32Array(vertexCount * 3),\n        indices: new (vertexCount > 0xffff ? Uint32Array : Uint16Array)(indexCount),\n        uv: new Float32Array(vertexCount * 2)\n    };\n\n    const cursors = {\n        vertex: 0, index: 0\n    };\n\n    for (let d = 0; d < preparedData.length; d++) {\n        addTopAndBottom(preparedData[d], data, cursors, opts);\n    }\n\n    for (let d = 0; d < preparedData.length; d++) {\n        const {holes, vertices} = preparedData[d];\n        const vertexCount = vertices.length / 2;\n\n        let start = 0;\n        let end = (holes && holes.length) ? holes[0] : vertexCount;\n        // Add exterior\n        addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\n        // Add holes\n        if (holes) {\n            for (let h = 0; h < holes.length; h++) {\n                start = holes[h];\n                end = holes[h + 1] || vertexCount;\n                addExtrudeSide(data, preparedData[d], start, end, cursors, opts);\n            }\n        }\n    }\n\n    // Wrap uv\n    for (let i = 0; i < data.uv.length; i++) {\n        const val = data.uv[i];\n        if (val > 0 && Math.round(val) === val) {\n            data.uv[i] = 1;\n        }\n        else {\n            data.uv[i] = val % 1;\n        }\n    }\n\n    data.normal = generateNormal(data.indices, data.position);\n    // PENDING\n    data.boundingRect = preparedData[0] && preparedData[0].rect;\n\n    return data;\n}\n\nfunction convertPolylineToTriangulatedPolygon(polyline, polylineIdx, opts) {\n    const lineWidth = opts.lineWidth;\n    const pointCount = polyline.length;\n    const points = new Float32Array(pointCount * 2);\n    const translate = opts.translate || [0, 0];\n    const scale = opts.scale || [1, 1];\n    for (let i = 0, k = 0; i < pointCount; i++) {\n        points[k++] = polyline[i][0] * scale[0] + translate[0];\n        points[k++] = polyline[i][1] * scale[1] + translate[1];\n    }\n\n    if (area(points, 0, pointCount) < 0) {\n        reversePoints(points, 2, 0, pointCount);\n    }\n\n    const insidePoints = [];\n    const outsidePoints = [];\n    const miterLimit = opts.miterLimit;\n    const outsideIndicesMap = innerOffsetPolygon(\n        points, outsidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false, true\n    );\n    reversePoints(points, 2, 0, pointCount);\n    const insideIndicesMap = innerOffsetPolygon(\n        points, insidePoints, 0, pointCount, 0, -lineWidth / 2, miterLimit, false, true\n    );\n\n    const polygonVertexCount = (insidePoints.length + outsidePoints.length) / 2;\n    const polygonVertices = new Float32Array(polygonVertexCount * 2);\n\n    let offset = 0;\n    const outsidePointCount = outsidePoints.length / 2;\n    for (let i = 0; i < outsidePoints.length; i++) {\n        polygonVertices[offset++] = outsidePoints[i];\n    }\n    for (let i = 0; i < insidePoints.length; i++) {\n        polygonVertices[offset++] = insidePoints[i];\n    }\n\n    // Built indices\n    const indices = new (polygonVertexCount > 0xffff ? Uint32Array : Uint16Array)(\n        ((pointCount - 1) * 2 + (polygonVertexCount - pointCount * 2)) * 3\n    );\n    let off = 0;\n    for (let i = 0; i < pointCount - 1; i++) {\n        const i2 = i + 1;\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i] - 1;\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\n\n        indices[off++] = outsidePointCount - 1 - outsideIndicesMap[i];\n        indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\n        indices[off++] = insideIndicesMap[i] + outsidePointCount;\n\n        if (insideIndicesMap[i2] - insideIndicesMap[i] === 2) {\n            indices[off++] = insideIndicesMap[i] + 2 + outsidePointCount;\n            indices[off++] = insideIndicesMap[i] + 1 + outsidePointCount;\n            indices[off++] = outsidePointCount - outsideIndicesMap[i2] - 1;\n        }\n        else if (outsideIndicesMap[i2] - outsideIndicesMap[i] === 2) {\n            indices[off++] = insideIndicesMap[i2] + outsidePointCount;\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 1);\n            indices[off++] = outsidePointCount - 1 - (outsideIndicesMap[i] + 2);\n        }\n    }\n\n    const topVertices = opts.bevelSize > 0\n        ? offsetPolygon(polygonVertices, [], opts.bevelSize, null, true) : polygonVertices;\n    const boundingRect = opts.boundingRect;\n\n    const res = splitVertices(polygonVertices, null, opts.smoothSide, opts.smoothSideThreshold);\n    return {\n        vertices: res.vertices,\n        rawVertices: vertices,\n        splittedMap: res.splittedMap,\n        indices,\n        topVertices,\n        rect: {\n            x: boundingRect.x * scale[0] + translate[0],\n            y: boundingRect.y * scale[1] + translate[1],\n            width: boundingRect.width * scale[0],\n            height: boundingRect.height * scale[1],\n        },\n        depth: typeof opts.depth === 'function' ? opts.depth(polylineIdx) : opts.depth,\n        holes: []\n    };\n}\n\nfunction removeClosePointsOfPolygon(polygon, epsilon) {\n    const newPolygon = [];\n    for (let k  = 0; k < polygon.length; k++) {\n        const points = polygon[k];\n        const newPoints = [];\n        const len = points.length;\n        let x1 = points[len - 1][0];\n        let y1 = points[len - 1][1];\n        let dist = 0;\n        for (let i = 0; i < len; i++) {\n            let x2 = points[i][0];\n            let y2 = points[i][1];\n            const dx = x2 - x1;\n            const dy = y2 - y1;\n            dist += Math.sqrt(dx * dx + dy * dy);\n            if (dist > epsilon) {\n                newPoints.push(points[i]);\n                dist = 0;\n            }\n            x1 = x2;\n            y1 = y2;\n        }\n        if (newPoints.length >= 3) {\n            newPolygon.push(newPoints);\n        }\n    }\n    return newPolygon.length > 0 ? newPolygon : null;\n}\n\nfunction simplifyPolygon(polygon, tolerance) {\n    const newPolygon = [];\n    for (let k  = 0; k < polygon.length; k++) {\n        let points = polygon[k];\n        points = doSimplify(points, tolerance, true);\n        if (points.length >= 3) {\n            newPolygon.push(points);\n        }\n    }\n    return newPolygon.length > 0 ? newPolygon : null;\n}\n/**\n *\n * @param {Array} polygons Polygons array that match GeoJSON MultiPolygon geometry.\n * @param {Object} [opts]\n * @param {number|Function} [opts.depth]\n * @param {number} [opts.bevelSize = 0]\n * @param {number} [opts.bevelSegments = 2]\n * @param {number} [opts.simplify = 0]\n * @param {boolean} [opts.smoothSide = 'auto']\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\n * @param {boolean} [opts.smoothBevel = false]\n * @param {boolean} [opts.excludeBottom = false]\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\n * @param {Array} [opts.translate]\n * @param {Array} [opts.scale]\n *\n * @return {Object} {indices, position, uv, normal, boundingRect}\n */\nexport function extrudePolygon(polygons, opts) {\n\n    opts = Object.assign({}, opts);\n\n    const min = [Infinity, Infinity];\n    const max = [-Infinity, -Infinity];\n    for (let i = 0; i < polygons.length; i++) {\n        updateBoundingRect(polygons[i][0], min, max);\n    }\n    opts.boundingRect = opts.boundingRect || {\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\n    };\n\n    normalizeOpts(opts);\n\n    const preparedData = [];\n    const translate = opts.translate || [0, 0];\n    const scale = opts.scale || [1, 1];\n    const boundingRect = opts.boundingRect;\n    const transformdRect = {\n        x: boundingRect.x * scale[0] + translate[0],\n        y: boundingRect.y * scale[1] + translate[1],\n        width: boundingRect.width * scale[0],\n        height: boundingRect.height * scale[1],\n    };\n\n    const epsilon = Math.min(\n        boundingRect.width, boundingRect.height\n    ) / 1e5;\n    for (let i = 0; i < polygons.length; i++) {\n        let newPolygon = removeClosePointsOfPolygon(polygons[i], epsilon);\n        if (!newPolygon) {\n            continue;\n        }\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\n        if (simplifyTolerance > 0) {\n            newPolygon = simplifyPolygon(newPolygon, simplifyTolerance);\n        }\n        if (!newPolygon) {\n            continue;\n        }\n\n        const {vertices, holes, dimensions} = earcut.flatten(newPolygon);\n\n        for (let k = 0; k < vertices.length;) {\n            vertices[k] = vertices[k++] * scale[0] + translate[0];\n            vertices[k] = vertices[k++] * scale[1] + translate[1];\n        }\n\n        convertToClockwise(vertices, holes);\n\n        if (dimensions !== 2) {\n            throw new Error('Only 2D polygon points are supported');\n        }\n        const topVertices = opts.bevelSize > 0\n            ? offsetPolygon(vertices, holes, opts.bevelSize, null, true) : vertices;\n        const indices = triangulate(topVertices, holes, dimensions);\n        const res = splitVertices(vertices, holes, opts.smoothSide, opts.smoothSideThreshold)\n\n        preparedData.push({\n            indices,\n            vertices: res.vertices,\n            rawVertices: vertices,\n            topVertices,\n            holes: res.holes,\n            splittedMap: res.splittedMap,\n            rect: transformdRect,\n            depth: typeof opts.depth === 'function' ? opts.depth(i) : opts.depth\n        });\n    }\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\n};\n\n/**\n *\n * @param {Array} polylines Polylines array that match GeoJSON MultiLineString geometry.\n * @param {Object} [opts]\n * @param {number} [opts.depth]\n * @param {number} [opts.bevelSize = 0]\n * @param {number} [opts.bevelSegments = 2]\n * @param {number} [opts.simplify = 0]\n * @param {boolean} [opts.smoothSide = 'auto']\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\n * @param {boolean} [opts.smoothBevel = false]\n * @param {boolean} [opts.excludeBottom = false]\n * @param {boolean} [opts.lineWidth = 1]\n * @param {boolean} [opts.miterLimit = 2]\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\n * @param {Array} [opts.translate]\n * @param {Array} [opts.scale]\n * @param {Object} [opts.boundingRect]\n * @return {Object} {indices, position, uv, normal, boundingRect}\n */\nexport function extrudePolyline(polylines, opts) {\n\n    opts = Object.assign({}, opts);\n\n    const min = [Infinity, Infinity];\n    const max = [-Infinity, -Infinity];\n    for (let i = 0; i < polylines.length; i++) {\n        updateBoundingRect(polylines[i], min, max);\n    }\n    opts.boundingRect = opts.boundingRect || {\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\n    };\n\n    normalizeOpts(opts);\n    const scale = opts.scale || [1, 1];\n\n    if (opts.lineWidth == null) {\n        opts.lineWidth = 1;\n    }\n    if (opts.miterLimit == null) {\n        opts.miterLimit = 2;\n    }\n    const preparedData = [];\n    // Extrude polyline to polygon\n    for (let i = 0; i < polylines.length; i++) {\n        let newPolyline = polylines[i];\n        const simplifyTolerance = opts.simplify / Math.max(scale[0], scale[1]);\n        if (simplifyTolerance > 0) {\n            newPolyline = doSimplify(newPolyline, simplifyTolerance, true);\n        }\n        preparedData.push(convertPolylineToTriangulatedPolygon(newPolyline, i, opts));\n    }\n\n    return innerExtrudeTriangulatedPolygon(preparedData, opts);\n}\n\nfunction updateBoundingRect(points, min, max) {\n    for (let i = 0; i < points.length; i++) {\n        min[0] = Math.min(points[i][0], min[0]);\n        min[1] = Math.min(points[i][1], min[1]);\n        max[0] = Math.max(points[i][0], max[0]);\n        max[1] = Math.max(points[i][1], max[1]);\n    }\n}\n\n/**\n *\n * @param {Object} geojson\n * @param {Object} [opts]\n * @param {number} opts.depth\n * @param {number} [opts.bevelSize = 0]\n * @param {number} [opts.bevelSegments = 2]\n * @param {number} [opts.simplify = 0]\n * @param {boolean} [opts.smoothSide = 'auto']\n * @param {boolean} [opts.smoothSideThreshold = 0.9]    // Will not smooth sharp side.\n * @param {boolean} [opts.smoothBevel = false]\n * @param {boolean} [opts.excludeBottom = false]\n * @param {boolean} [opts.lineWidth = 1]\n * @param {boolean} [opts.miterLimit = 2]\n * @param {Object} [opts.fitRect] translate and scale will be ignored if fitRect is set\n * @param {Array} [opts.translate]\n * @param {Array} [opts.scale]\n * @param {Object} [opts.boundingRect]\n * @return {Object} {polyline: {indices, position, uv, normal}, polygon: {indices, position, uv, normal}}\n */\n\n // TODO Not merge feature\nexport function extrudeGeoJSON(geojson, opts) {\n\n    opts = Object.assign({}, opts);\n\n    const polylines = [];\n    const polygons = [];\n\n    const polylineFeatureIndices = [];\n    const polygonFeatureIndices = [];\n\n    const min = [Infinity, Infinity];\n    const max = [-Infinity, -Infinity];\n\n    if (geojson.type === 'LineString' || geojson.type === 'MultiLineString' || geojson.type === 'Polygon' || geojson.type === 'MultiPolygon') {\n        geojson = {\n            features: [{\n                geometry: geojson\n            }]\n        }\n    }\n\n    for (let i = 0; i < geojson.features.length; i++) {\n        const feature = geojson.features[i];\n        const geometry = feature.geometry;\n        if (geometry && geometry.coordinates) {\n            switch (geometry.type) {\n                case 'LineString':\n                    polylines.push(geometry.coordinates);\n                    polylineFeatureIndices.push(i);\n                    updateBoundingRect(geometry.coordinates, min, max);\n                    break;\n                case 'MultiLineString':\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\n                        polylines.push(geometry.coordinates[k]);\n                        polylineFeatureIndices.push(i);\n                        updateBoundingRect(geometry.coordinates[k], min, max);\n                    }\n                    break;\n                case 'Polygon':\n                    polygons.push(geometry.coordinates);\n                    polygonFeatureIndices.push(i);\n                    updateBoundingRect(geometry.coordinates[0], min, max);\n                    break;\n                case 'MultiPolygon':\n                    for (let k = 0; k < geometry.coordinates.length; k++) {\n                        polygons.push(geometry.coordinates[k]);\n                        polygonFeatureIndices.push(i);\n                        updateBoundingRect(geometry.coordinates[k][0], min, max);\n                    }\n                    break;\n            }\n        }\n    }\n\n    opts.boundingRect = opts.boundingRect || {\n        x: min[0], y: min[1], width: max[0] - min[0], height: max[1] - min[1]\n    };\n\n    const originalDepth = opts.depth;\n    return {\n        polyline: extrudePolyline(polylines, Object.assign(opts, {\n            depth: function (idx) {\n                if (typeof originalDepth === 'function') {\n                    return originalDepth(\n                        geojson.features[polylineFeatureIndices[idx]]\n                    );\n                }\n                return originalDepth;\n            }\n        })),\n        polygon: extrudePolygon(polygons, Object.assign(opts, {\n            depth: function (idx) {\n                if (typeof originalDepth === 'function') {\n                    return originalDepth(\n                        geojson.features[polygonFeatureIndices[idx]]\n                    );\n                }\n                return originalDepth;\n            }\n        }))\n    };\n}"],"names":["earcutModule","area","getSqDist","p1","p2","dx","dy","getSqSegDist","p","x","y","t","simplifyRadialDist","points","sqTolerance","prevPoint","newPoints","point","i","len","length","push","simplifyDPStep","first","last","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","undefined","dot","v1","v2","v2Dot","normalize","out","v","z","d","Math","sqrt","v2Normalize","scale","s","scaleAndAdd","v2Add","v3Sub","v3Normalize","v3Cross","ax","ay","az","bx","by","bz","rel","slerp","start","end","cosT","theta","acos","cos","sin","lineIntersection","x1","y1","x2","y2","x3","y3","x4","y4","writeOffset","dx1","dx2","dy1","dy2","cross","tmp1","tmp2","t1","n","j","x0","y0","triangulate","vertices","holes","dimensions","earcut","flatten","data","innerOffsetPolygon","outStart","offset","miterLimit","close","removeIntersections","checkMiterLimit","cursor","indicesMap","Uint32Array","prevOffsetX","prevOffsetY","prevCursor","tmpIntersection","nextIdx","prevIdx","needCheckIntersection","offsetX","offsetY","tmp","cosA","sinA","miter","min","isCovex","mx","my","halfA","dist","tan","abs","offsetPolygon","offsetVertices","Float32Array","exteriorSize","reversePoints","stride","floor","a","b","convertToClockwise","polygonVertexCount","h","normalizeOpts","opts","depth","bevelSize","bevelSegments","smoothBevel","smoothSide","smoothSideThreshold","round","boundingRect","translate","fitRect","targetX","targetY","targetWidth","width","targetHeight","height","generateNormal","indices","position","v3Set","c","p3","v21","v32","normals","f","i1","i2","i3","quadToTriangle","addExtrudeSide","cursors","topVertices","splittedMap","rect","ringVertexCount","splitBevel","vertexOffset","vertex","size","max","isDuplicateVertex","idx","v0","ringCount","vLen","k","uLen","prevX","prevY","rawIdx","l","t2","PI","r","zz","prevX2","prevY2","prevZ2","uv","m","vtx3","vtx2","sideStartRingN","addTopAndBottom","indicesLen","excludeBottom","vertexCount","splitVertices","isAutoSmooth","newVertices","newHoles","count","polysCount","angleCos","innerExtrudeTriangulatedPolygon","preparedData","indexCount","faceEnd","faceStart","sideRingVertexCount","Uint16Array","val","normal","convertPolylineToTriangulatedPolygon","polyline","polylineIdx","lineWidth","pointCount","insidePoints","outsidePoints","outsideIndicesMap","insideIndicesMap","polygonVertices","outsidePointCount","off","res","rawVertices","removeClosePointsOfPolygon","polygon","epsilon","newPolygon","simplifyPolygon","doSimplify","extrudePolygon","polygons","Object","assign","Infinity","updateBoundingRect","transformdRect","simplifyTolerance","Error","extrudePolyline","polylines","newPolyline","extrudeGeoJSON","geojson","polylineFeatureIndices","polygonFeatureIndices","type","features","geometry","feature","coordinates","originalDepth"],"mappings":"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"}